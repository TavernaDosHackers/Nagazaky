import requests as r
import sys
import json
import argparse as arg
import os as sistema
import time

sistema.system("cls" if sistema.name == "nt" else "reset")
menu = """
  _   _                            _    Exploit Finder
 | \ | |                          | |
 |  \| | __ _  __ _  __ _ ______ _| | ___   _
 | . ` |/ _` |/ _` |/ _` |_  / _` | |/ / | | |
 | |\  | (_| | (_| | (_| |/ / (_| |   <| |_| |
 |_| \_|\__,_|\__, |\__,_/___\__,_|_|\_\\__, |
               __/ |                     __/ |
              |___/                     |___/
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 # Nagazaky Exploit Finder Automatic
 # Discord: https://discord.gg/xDT9Mem
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::"""

manual = """--cms (-c) Tipo de CMS
--filtro (-f) Filtra as falhas
--salvar (-s) Salvar os resultados 'ngz.txt'."""

parser = arg.ArgumentParser()

parser.add_argument("--cms", "-c", action="store") # -c para setar a cms
parser.add_argument("--filtro", "-f", action="store") # -f para setar a falha
parser.add_argument("--salvar", "-s", action="store_true") ## se for positivo, ele salva.

param = parser.parse_args()

api = "http://www.exploitalert.com/api/search-exploit?name={}".format(param.cms)

if len(sys.argv) == 1: ## se possui algo escrito, ele inicia.
    print(menu)
    print(manual)
    exit()

def inicio():
    print(menu)
    print("[+] - Verificando conexão com o servidor...")

    try:
        api_req = r.get(api) ## faz requisição na api do servidor
        print("[+] - Conexão com o servidor OK.")
    except Exception as err: ## caso o servidor esteja indisponivel
        print("[+] - O servidor está fora do ar.", err)
        exit("\n")

    print("[+] Decodificando arquivo JSON...")

    try: ## aqui ele tenta decodificar o json apartir do json.loads
        api_decode = json.loads(api_req.text); print("    * Decodificado!")
    except: ## exceção caso ele n consiga decodificar
        print("[+] Impossivel decodificar o JSON do servidor.")
        exit("\n")

    sys.stdout.write("\n[+] Listando exploits encontrados...") 
    sys.stdout.flush()

    if param.filtro:
        filtro_api(param.filtro, api_decode)
    else:
        normal_api(api_decode)

def filtro_api(filtro_usuario, pagina):
    contador = 0
    lista_   = []
    
    for xpl in pagina:
        if filtro_usuario in xpl["name"]:
            reference = "http://www.exploitalert.com/view-details.html?id={}".format(xpl["id"])
            print("\n* Nome: {} / * Data: {} / * Id: {}\n * POC: {}".format(xpl["name"], xpl["date"], xpl["id"], reference))
            contador += 1
            lista_.append("* Nome: {} / * Data: {} / * Id: {}\n * POC: {}".format(xpl["name"], xpl["date"], xpl["id"], reference))
        else:
            continue

    print("\n* Total de exploits encontrados:", str(contador))
    if param.salvar: 
        salvar_resultados(lista_)

def normal_api(pagina):
    lista_=[]
    for xpl in pagina:
        reference="http://www.exploitalert.com/view-details.html?id={}".format(xpl["id"])

        print("\n* Nome: {} / * Data: {} / * Id: {}\n * POC: {}".format(xpl["name"], xpl["date"], xpl["id"], reference))
        
        lista_.append("* Nome: {} / * Data: {} / * Id: {}\n * POC: {}".format(xpl["name"], xpl["date"], xpl["id"], reference))
	
    print("\n* Total de exploits:", str(len(pagina)))
	
    if param.salvar: 
        salvar_resultados(lista_)
    
def salvar_resultados(lista):
	print("\n[+] Salvando os resultados encontrados...")
	arquivo=open("ngz.txt", "w")
	arquivo=[arquivo.write(str(x) + "\n") for x in lista]

try: 
    inicio()
except KeyboardInterrupt: 
    exit("\n")
